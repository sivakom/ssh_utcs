drop view nl_user_emp ;
drop view nl_user_admin ;
drop view nl_member_emp;
drop view nl_member_notice_list;

create view nl_user_emp as
SELECT 
    USER_ID,
    TYPE,
    NL_Member_member_id
FROM nl_employees where type = 'User' ;

create or replace TRIGGER nl_user_trigger
     INSTEAD OF insert ON nl_user_emp
     FOR EACH ROW
BEGIN
    insert into nl_employees( 
    USER_ID,
    TYPE,
    NL_MEMBER_MEMBER_ID)
     VALUES ( 
    :NEW.USER_ID,
    'User',
    :NEW.NL_MEMBER_MEMBER_ID) ;
END;
/

create view nl_user_admin as
SELECT 
    USER_ID,
    TYPE
FROM nl_employees where type = 'Administrator' ;

create or replace TRIGGER nl_user_admin_trigger
     INSTEAD OF insert ON nl_user_admin
     FOR EACH ROW
BEGIN
    insert into nl_employees( 
    USER_ID,
    TYPE)
     VALUES ( 
    :NEW.USER_ID,
    'Administrator') ;
END;
/

create view nl_member_emp as
SELECT 
    MEMBER_ID,
    TYPE,
    STATUS,
    NAME,
    STATUS_EFFECTIVE_DATE,
    NL_Employees_user_id
FROM nl_member where type = 'Employee' ;

create or replace TRIGGER nl_member_emp_trigger
     INSTEAD OF insert ON nl_member_emp
     FOR EACH ROW
BEGIN
    insert into nl_member( 
    MEMBER_ID,
    TYPE,
    STATUS,
    NAME,
    STATUS_EFFECTIVE_DATE,
    NL_EMPLOYEES_USER_ID)
     VALUES ( 
    :NEW.MEMBER_ID,
    'Employee',
    :NEW.STATUS,
    :NEW.NAME,
    :NEW.STATUS_EFFECTIVE_DATE,
    :NEW.NL_EMPLOYEES_USER_ID) ;
END;
/

create view nl_member_notice_list as
SELECT 
    MEMBER_ID,
    TYPE,
    STATUS,
    NAME,
    DESCRIPTION,
    OWNERSHIP_DIVISION_CODE,
    EXTERNAL_VIEW_NAME,
    STATUS_EFFECTIVE_DATE,
    CREATED
FROM nl_member where type = 'Notice List' ;

create or replace TRIGGER nl_member_list_ins_trigger
     INSTEAD OF insert ON nl_member_notice_list
     FOR EACH ROW
BEGIN
    insert into nl_member( 
    MEMBER_ID,
    TYPE,
    STATUS,
    NAME,
    DESCRIPTION,
    OWNERSHIP_DIVISION_CODE,
    EXTERNAL_VIEW_NAME,
    STATUS_EFFECTIVE_DATE,
    CREATED)
     VALUES ( 
    :NEW.MEMBER_ID,
    'Notice List',
    'Active',
    :NEW.NAME,
    :NEW.DESCRIPTION,
    :NEW.OWNERSHIP_DIVISION_CODE,
    :NEW.EXTERNAL_VIEW_NAME,
    SYSDATE,
    SYSDATE) ;
END;
/

create or replace TRIGGER nl_member_list_upd_trigger
     INSTEAD OF update ON nl_member_notice_list
     FOR EACH ROW
BEGIN
    UPDATE nl_member
    SET
        MEMBER_ID = :NEW.MEMBER_ID,
        TYPE = :NEW.TYPE,
        STATUS = :NEW.STATUS,
        NAME = :NEW.NAME,
        DESCRIPTION = :NEW.DESCRIPTION,
        OWNERSHIP_DIVISION_CODE = :NEW.OWNERSHIP_DIVISION_CODE,
        EXTERNAL_VIEW_NAME = :NEW.EXTERNAL_VIEW_NAME,
        STATUS_EFFECTIVE_DATE = SYSDATE,
        CREATED = SYSDATE
    WHERE MEMBER_ID = (:OLD.member_id);
END;
/

create or replace TRIGGER nl_m2m_update_trigger
     AFTER update ON nl_m2m
DECLARE
    cycle_count NUMBER;
    inactive_lists_count NUMBER;
BEGIN
    SELECT COUNT(connect_by_iscycle)
    INTO cycle_count
    FROM nl_m2m
    WHERE connect_by_iscycle = 1
    CONNECT BY nocycle prior nl_member_member_id = nl_member_member_id1;

    SELECT COUNT(*)
    INTO inactive_lists_count
    FROM nl_m2m JOIN nl_member
    ON nl_m2m.nl_member_member_id1 = nl_member.member_id
    WHERE type = 'Notice List' AND status = 'Inactive';

    IF cycle_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20343, 'Update will create a cycle');
    END IF;

    IF inactive_lists_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20343, 'Notice Lists cannot contain inactive notice lists.');
    END IF;
END;
/

create or replace TRIGGER nl_m2m_insert_trigger
     AFTER INSERT ON nl_m2m
DECLARE
    cycle_count NUMBER;
    inactive_lists_count NUMBER;
BEGIN
    SELECT COUNT(connect_by_iscycle)
    INTO cycle_count
    FROM nl_m2m
    WHERE connect_by_iscycle = 1
    CONNECT BY nocycle prior nl_member_member_id = nl_member_member_id1;

    SELECT COUNT(*)
    INTO inactive_lists_count
    FROM nl_m2m JOIN nl_member
    ON nl_m2m.nl_member_member_id1 = nl_member.member_id
    WHERE type = 'Notice List' AND status = 'Inactive';

    IF cycle_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20343, 'Update will create a cycle');
    END IF;

    IF inactive_lists_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20343, 'Notice Lists cannot contain inactive notice lists.');
    END IF;
END;
/